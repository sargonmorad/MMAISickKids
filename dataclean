import numpy as np
import scipy as sp
import pandas as pd
import matplotlib as mpl
import datetime as dt
#import seaborn as sns

from IPython.display import display, HTML

#import ED DI Data
di2018q3 = pd.read_excel('didata/ED DI 2018 - Q3.xlsx')
di2018q4 = pd.read_excel('didata/ED DI 2018 - Q4.xlsx')
di2019q1 = pd.read_excel('didata/ED DI 2019 - Q1.xlsx')
di2019q2 = pd.read_excel('didata/ED DI 2019 - Q2 20190621.xlsx')

di_data = pd.merge(di2018q3, di2018q4, how='outer')
di_data = pd.merge(di_data, di2019q1, how='outer')
di_data = pd.merge(di_data, di2019q2, how='outer')

#import Epic Clinical Data
preFeb_C2019 = pd.read_csv('ED_Epic_Data/ED_DATA_EPIC_AUG18_TO_FEB19.csv', encoding='latin1')
Feb_C2019 = pd.read_excel('ED_Epic_Data/Feb13_ClinData_2019.xlsx')
Mar_C2019 = pd.read_excel('ED_Epic_Data/March_ClinData_2019.xlsx')
Apr_C2019 = pd.read_excel('ED_Epic_Data/April_ClinData_2019.xlsx')
May_C2019 = pd.read_excel('ED_Epic_Data/May_ClinData_2019.xlsx')
Jun_C2019 = pd.read_excel('ED_Epic_Data/June_ClinData_2019.xlsx')

preFeb_C2019 = preFeb_C2019.drop(['Unnamed: 0', 'X'], axis=1)

preFeb_C2019 = preFeb_C2019.rename(columns={'Encounter.Number': 'Encounter Number', 'Registration.Number': 'Registration Number', 'Age.at.Visit': 'Age at Visit', 'Last.Weight': 'Last Weight', 'Pref.Language': 'Pref Language', 'Arrival.Method': 'Arrival Method', 'Care.Area': 'Care Area', 'ED.Complaint': 'ED Complaint', 'First.ED.Provider': 'First ED Provider', 'Last.ED.Provider': 'Last ED Provider', 'ED.Longest.Attending.ED.Provider': 'ED Longest Attending ED Provider', 'Treatment.Team': 'Treatment Team', 'Current.Medications': 'Current Medications', 'Discharge.Admit.Time': 'Discharge-Admit Time', 'Last.Attending.Provider': 'Last Attending Provider', 'Door.to.PIA': 'Door to PIA', 'ED.PIA.Threshold': 'ED PIA Threshold', 'ED.Completed.Length.of.Stay..Hours.': 'ED Completed Length of Stay (Hours)', 'ED.Completed.Length.of.Stay..Minutes.': 'ED Completed Length of Stay (Minutes)', 'ED.LWBS': 'ED LWBS', 'Arrival.to.Room': 'Arrival to Room', 'Door.to.Pain.Med': 'Door to Pain Med', 'Day.of.Arrival': 'Day of Arrival', 'Hour.of.Arrival': 'Hour of Arrival', 'Triage.Complete.User': 'Triage Complete User', 'Arrival.to.Initial.Nursing.Assessment': 'Arrival to Initial Nursing Assessment', 'Door.to.Doc': 'Door to Doc', 'Disch.Date.Time': 'Disch Date/Time', 'Primary.Dx': 'Primary Dx', 'Admitting.Provider': 'Admitting Provider', 'Lab.Status': 'Lab Status', 'Rad.Status': 'Rad Status'})

epic_data = pd.merge(preFeb_C2019, Feb_C2019, how='outer')
epic_data = pd.merge(epic_data, Mar_C2019, how='outer')
epic_data = pd.merge(epic_data, Apr_C2019, how='outer')
epic_data = pd.merge(epic_data, May_C2019, how='outer')
epic_data = pd.merge(epic_data, Jun_C2019, how='outer')

#make master copies of data sets - everything below can be done with following dataframes
di_data_master = di_data.copy()
epic_data_master = epic_data.copy()
#use di_data and epic_data for operations below

#drop Accession # column
di_data = di_data.drop(['Accession #'], axis=1)
#drop 'Reason for Exam' column
di_data = di_data.drop(['Reason for Exam'], axis=1)

#Convert string time entries into datetime objects
di_data['End Exam Time'] = pd.to_datetime(di_data['End Exam Time'], format="%a %d %b %Y %I:%M %p")
di_data['Order Time'] = pd.to_datetime(di_data['Order Time'], format="%Y/%m/%d %H:%M")
di_data['Finalized Time'] = pd.to_datetime(di_data['Finalized Time'], format="%d/%m/%Y %I:%M:%S %p", errors='coerce')
di_data['Protocolling Instant'] = pd.to_datetime(di_data['Protocolling Instant'], format="%d/%m/%Y %I:%M %p", errors='coerce')

#create a categories df
categories = pd.DataFrame(di_data[['Category']])
categories['Category id'] = categories.groupby(['Category']).ngroup()
categories = categories.drop_duplicates()
categories = categories.sort_values('Category id')

#create a procedure  df
procedures = pd.DataFrame(di_data[['Procedure']])
procedures['Procedure id'] = procedures.groupby(['Procedure']).ngroup()
procedures = procedures.drop_duplicates()
procedures = procedures.sort_values('Procedure id')

#create Authorizing Provider df
authorizing_provider = pd.DataFrame(di_data[['Authorizing Provider']])
authorizing_provider['Authorizing Provider id'] = authorizing_provider.groupby(['Authorizing Provider']).ngroup()
authorizing_provider = authorizing_provider.drop_duplicates()
authorizing_provider = authorizing_provider.sort_values('Authorizing Provider id')

#combine di_data set with newly created dfs that have ids
di_data = pd.merge(di_data, categories, how='left', on='Category')
di_data = pd.merge(di_data, procedures, how='left', on='Procedure')
di_data = pd.merge(di_data, authorizing_provider, how='left', on='Authorizing Provider')

finalizing_physician = authorizing_provider.copy()
finalizing_physician = finalizing_physician.rename(columns={'Authorizing Provider': 'Finalizing Physician', 'Authorizing Provider id': 'Finalizing Physician id'})

di_data = pd.merge(di_data, finalizing_physician, how='left', on='Finalizing Physician')

di_data = di_data.drop(['Category', 'Procedure', 'Authorizing Provider', 'Name'], axis=1)






















